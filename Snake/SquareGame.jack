// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/09/Square/SquareGame.jack

/**
 * Implements the Square Dance game.
 * In this game you can move a black square around the screen and
 * change its size during the movement.
 * In the beginning, the square is located at the top-left corner
 * of the screen. The arrow keys are used to move the square.
 * The 'z' & 'x' keys are used to decrement and increment the size.
 * The 'q' key is used to quit the game.
 */
class SquareGame {

    // The square
    field Square square;
    // random seed
    field int seed;
    //The food square
    field FoodSquare foodSquare;

    // The square's movement direction
    field int direction; // 0=none,1=up,2=down,3=left,4=right

    /** Constructs a new Square Game. */
    constructor SquareGame new() {
        let square = Square.new(0, 0, 10);
	do square.initializeBody();
        let direction = 0;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do square.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Starts the game. Handles inputs from the user that control
     *  the square's movement, direction and size. */
    method void run(int up, int down, int left, int right) {
        var int key;
        var boolean exit;

        let exit = false;

        do createFoodSquare();

        while (~exit) {
            // waits for a key to be pressed.
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do moveSquare();
                do doCollisionHeadFood();
            }
	    if (key = 71) {
		do square.addBody();
            }
            if (key = 81) {
                let exit = true;
            }
            if ((key = up) & ~(direction = 2)) {
                let direction = 1;
            }
            if ((key = down) & ~(direction = 1)) {
                let direction = 2;
            }
            if ((key = left) & ~(direction = 4)) {
                let direction = 3;
            }
            if ((key = right) & ~(direction = 3)) {
                let direction = 4;
            }

            // waits for the key to be released.
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveSquare();
                do doCollisionHeadFood();
            }
        }
        return;
	}

    /** Moves the square by 2 pixels in the current direction. */
    method void moveSquare() {
	//var int tempX, tempY;
	//let tempX = square.getX();
	//let tempY = square.getY();

        if (direction = 1) {
            do square.moveUp();
        }
        if (direction = 2) {
            do square.moveDown();
        }
        if (direction = 3) {
            do square.moveLeft();
        }
        if (direction = 4) {
            do square.moveRight();
        }

	//do body.moveTo( tempX, tempY );

        do Sys.wait(30); // Delays the next movement.
        return;
    }
    
    method void doCollisionHeadFood() {
        if (collisionHeadFood()){
            do foodSquare.erase();
            do foodSquare.dispose();
            do createFoodSquare();
	    do square.addBody();
        }
        return;
    }

    /** Checks the collision between the Head of the snake and the food */
    method boolean collisionHeadFood() {
        var boolean xCollision, yCollision;
        let xCollision = false;
        let yCollision = false;

        /* Logic for X */
        if( (foodSquare.getX() + foodSquare.getSize()) > (square.getX()) ) { 
            if( (foodSquare.getX() + foodSquare.getSize()) < (square.getX() + square.getSize()) ) {
                let xCollision = true;
            }
        }
        if( (foodSquare.getX()) > (square.getX()) ) { 
            if( (foodSquare.getX()) < (square.getX() + square.getSize()) ) {
                let xCollision = true;
            }
        }

        /* Logic for Y */
        if( (foodSquare.getY() + foodSquare.getSize()) > (square.getY()) ) { 
            if( (foodSquare.getY() + foodSquare.getSize()) < (square.getY() + square.getSize()) ) {
                let yCollision = true;
            }
        }
        if( (foodSquare.getY()) > (square.getY()) ) { 
            if( (foodSquare.getY()) < (square.getY() + square.getSize()) ) {
                let yCollision = true;
            }
        }

        /* No collision */
        return xCollision & yCollision;
    }

    /** Food square created for the snake to get */
    method void createFoodSquare() {
    	var int foodSize;

     	let foodSize = 10;

     	let foodSquare = Square.new(randRange(510 - foodSize),
                                    randRange(254 - foodSize),
                                    foodSize);
     	return;
    }

    /** Return a random number fro 0..range */
    method int randRange(int range) {
        var int mask;
        var int val;

        let mask = 1;
        while (mask < range) {
            let mask = mask * 2 + 1;
        }

        let val = rand() & mask;
        while (val > range) {
            let val = rand() & mask;
        }
        return val;
    }

    method int rand() {
        let seed = seed + 20251;
        if (seed < 0) {
            let seed = seed - 32767 - 1;
        }
        return seed;
    }
}
